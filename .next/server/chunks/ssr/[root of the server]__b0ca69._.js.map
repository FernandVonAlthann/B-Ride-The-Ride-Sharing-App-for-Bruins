{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/karolita/Documents/GitHub/B-Ride-The-Ride-Sharing-App-for-Bruins/src/components/Map.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState, useRef } from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\n// Fix for missing marker icons:\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl:\n    \"https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png\",\n  iconUrl: \"https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png\",\n  shadowUrl: \"https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png\",\n});\n\nconst defaultCenter = { lat: 34.0689, lng: -118.4452 }; // Default to UCLA\n\nexport default function Map() {\n  const mapRef = useRef<L.Map | null>(null);\n  const mapContainerRef = useRef<HTMLDivElement | null>(null);\n  const [locations, setLocations] = useState<{ lat: number; lng: number }[]>([]);\n\n  // Post current user's location to the API when the component mounts\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n          const userId = \"myUser\"; // For testing; in production, use a unique user id\n          try {\n            await fetch(\"/api/locations\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({ userId, lat: latitude, lng: longitude }),\n            });\n          } catch (error) {\n            console.error(\"Error posting location:\", error);\n          }\n        },\n        (error) => {\n          console.error(\"Error getting geolocation:\", error);\n        }\n      );\n    }\n  }, []);\n\n  // Fetch updated locations from the API every 5 seconds\n  useEffect(() => {\n    const fetchLocations = async () => {\n      try {\n        const res = await fetch(\"/api/locations\");\n        const data = await res.json();\n        setLocations(data.locations);\n      } catch (error) {\n        console.error(\"Error fetching locations:\", error);\n      }\n    };\n\n    // Initial fetch\n    fetchLocations();\n\n    const interval = setInterval(fetchLocations, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Initialize the map and update markers when locations change\n  useEffect(() => {\n    if (!mapContainerRef.current) return;\n\n    if (!mapRef.current) {\n      mapRef.current = L.map(mapContainerRef.current).setView(\n        [defaultCenter.lat, defaultCenter.lng],\n        12\n      );\n\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: \"&copy; OpenStreetMap contributors\",\n      }).addTo(mapRef.current);\n    }\n\n    // Remove existing markers\n    mapRef.current.eachLayer((layer) => {\n      if (layer instanceof L.Marker) {\n        mapRef.current?.removeLayer(layer);\n      }\n    });\n\n    // Add new markers for each location\n    locations.forEach((loc) => {\n      L.marker([loc.lat, loc.lng]).addTo(mapRef.current!);\n    });\n  }, [locations]);\n\n  return <div ref={mapContainerRef} style={{ width: \"100%\", height: \"100%\" }} />;\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;;AAMA,gCAAgC;AAChC,OAAO,iJAAA,CAAA,UAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW;AAC3C,iJAAA,CAAA,UAAC,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;IAC1B,eACE;IACF,SAAS;IACT,WAAW;AACb;AAEA,MAAM,gBAAgB;IAAE,KAAK;IAAS,KAAK,CAAC;AAAS,GAAG,kBAAkB;AAE3D,SAAS;IACtB,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAgB;IACpC,MAAM,kBAAkB,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAyB;IACtD,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkC,EAAE;IAE7E,oEAAoE;IACpE,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,UAAU,WAAW,EAAE;YACzB,UAAU,WAAW,CAAC,kBAAkB,CACtC,OAAO;gBACL,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,SAAS,MAAM;gBAC/C,MAAM,SAAS,UAAU,mDAAmD;gBAC5E,IAAI;oBACF,MAAM,MAAM,kBAAkB;wBAC5B,QAAQ;wBACR,SAAS;4BACP,gBAAgB;wBAClB;wBACA,MAAM,KAAK,SAAS,CAAC;4BAAE;4BAAQ,KAAK;4BAAU,KAAK;wBAAU;oBAC/D;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,2BAA2B;gBAC3C;YACF,GACA,CAAC;gBACC,QAAQ,KAAK,CAAC,8BAA8B;YAC9C;QAEJ;IACF,GAAG,EAAE;IAEL,uDAAuD;IACvD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,iBAAiB;YACrB,IAAI;gBACF,MAAM,MAAM,MAAM,MAAM;gBACxB,MAAM,OAAO,MAAM,IAAI,IAAI;gBAC3B,aAAa,KAAK,SAAS;YAC7B,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,6BAA6B;YAC7C;QACF;QAEA,gBAAgB;QAChB;QAEA,MAAM,WAAW,YAAY,gBAAgB;QAC7C,OAAO,IAAM,cAAc;IAC7B,GAAG,EAAE;IAEL,8DAA8D;IAC9D,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAE9B,IAAI,CAAC,OAAO,OAAO,EAAE;YACnB,OAAO,OAAO,GAAG,iJAAA,CAAA,UAAC,CAAC,GAAG,CAAC,gBAAgB,OAAO,EAAE,OAAO,CACrD;gBAAC,cAAc,GAAG;gBAAE,cAAc,GAAG;aAAC,EACtC;YAGF,iJAAA,CAAA,UAAC,CAAC,SAAS,CAAC,sDAAsD;gBAChE,aAAa;YACf,GAAG,KAAK,CAAC,OAAO,OAAO;QACzB;QAEA,0BAA0B;QAC1B,OAAO,OAAO,CAAC,SAAS,CAAC,CAAC;YACxB,IAAI,iBAAiB,iJAAA,CAAA,UAAC,CAAC,MAAM,EAAE;gBAC7B,OAAO,OAAO,EAAE,YAAY;YAC9B;QACF;QAEA,oCAAoC;QACpC,UAAU,OAAO,CAAC,CAAC;YACjB,iJAAA,CAAA,UAAC,CAAC,MAAM,CAAC;gBAAC,IAAI,GAAG;gBAAE,IAAI,GAAG;aAAC,EAAE,KAAK,CAAC,OAAO,OAAO;QACnD;IACF,GAAG;QAAC;KAAU;IAEd,qBAAO,8OAAC;QAAI,KAAK;QAAiB,OAAO;YAAE,OAAO;YAAQ,QAAQ;QAAO;;;;;;AAC3E"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///Users/karolita/Documents/GitHub/B-Ride-The-Ride-Sharing-App-for-Bruins/src/components/ui/button.tsx"],"sourcesContent":["import React from 'react';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {}\n\nexport const Button: React.FC<ButtonProps> = ({ children, className, ...props }) => {\n  return (\n    <button {...props} className={className}>\n      {children}\n    </button>\n  );\n};\n"],"names":[],"mappings":";;;;;AAIO,MAAM,SAAgC,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,OAAO;IAC7E,qBACE,8OAAC;QAAQ,GAAG,KAAK;QAAE,WAAW;kBAC3B;;;;;;AAGP"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/karolita/Documents/GitHub/B-Ride-The-Ride-Sharing-App-for-Bruins/src/app/map/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useRouter } from \"next/navigation\";\nimport Map from \"@/components/Map\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function MapPage() {\n  const router = useRouter();\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-6\">\n      <h1 className=\"text-3xl font-bold mb-4\">Live User Locations</h1>\n      <div className=\"w-[50vw] h-[50vh] rounded-md shadow-md\">\n        <Map />\n      </div>\n      <Button\n        onClick={() => router.push(\"/dashboard\")}\n        className=\"bg-gray-500 hover:bg-gray-600 text-white mt-4\"\n      >\n        Go Back\n      </Button>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS;IACtB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAG,WAAU;0BAA0B;;;;;;0BACxC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,yHAAA,CAAA,UAAG;;;;;;;;;;0BAEN,8OAAC,kIAAA,CAAA,SAAM;gBACL,SAAS,IAAM,OAAO,IAAI,CAAC;gBAC3B,WAAU;0BACX;;;;;;;;;;;;AAKP"}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}