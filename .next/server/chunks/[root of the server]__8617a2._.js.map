{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///Users/karolita/Documents/GitHub/B-Ride-The-Ride-Sharing-App-for-Bruins/src/app/api/auth/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\nconst SECRET = \"our_secret_key\";  \n\n// Temporary in-memory user storage\nconst users = [\n    { id: \"1\", email: \"test@example.com\", password: bcrypt.hashSync(\"password123\", 10) }\n];\n\n// Function to find user by email\nasync function getUserByEmail(email: string) {\n    return users.find(user => user.email === email);\n}\n\nexport async function POST(req: NextRequest) {\n    try {\n        const { email, password } = await req.json();\n\n        const user = await getUserByEmail(email);\n        if (!user) {\n            return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n        }\n\n        const isValidPassword = bcrypt.compareSync(password, user.password);\n        if (!isValidPassword) {\n            return NextResponse.json({ error: \"Invalid credentials\" }, { status: 401 });\n        }\n\n        const token = jwt.sign({ userId: user.id }, SECRET, { expiresIn: '1h' });\n\n        return NextResponse.json({ token, userId: user.id });\n    } catch (error) {\n        return NextResponse.json({ error: \"Something went wrong\" }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,SAAS;AAEf,mCAAmC;AACnC,MAAM,QAAQ;IACV;QAAE,IAAI;QAAK,OAAO;QAAoB,UAAU,mIAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,eAAe;IAAI;CACtF;AAED,iCAAiC;AACjC,eAAe,eAAe,KAAa;IACvC,OAAO,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK;AAC7C;AAEO,eAAe,KAAK,GAAgB;IACvC,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE1C,MAAM,OAAO,MAAM,eAAe;QAClC,IAAI,CAAC,MAAM;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,MAAM,kBAAkB,mIAAA,CAAA,UAAM,CAAC,WAAW,CAAC,UAAU,KAAK,QAAQ;QAClE,IAAI,CAAC,iBAAiB;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE,QAAQ,KAAK,EAAE;QAAC,GAAG,QAAQ;YAAE,WAAW;QAAK;QAEtE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;YAAO,QAAQ,KAAK,EAAE;QAAC;IACtD,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC9E;AACJ"}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}